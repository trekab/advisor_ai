<div class="chat-container">
  <!-- Header Section -->
  <div class="chat-header">
    <div class="header-content">
      <h1>Ask Anything</h1>
      <button class="close-btn" onclick="window.history.back()">√ó</button>
    </div>
    
    <!-- Tabs -->
    <div class="chat-tabs">
      <div class="tab active" data-tab="chat">Chat</div>
      <div class="tab" data-tab="history">History</div>
      <button class="new-thread-btn">+ New thread</button>
    </div>
  </div>

  <!-- Context Area -->
  <div class="context-area">
    <div class="context-info">
      <span class="context-label">Context set to all meetings</span>
      <span class="context-time"><%= Time.current.strftime("%I:%M%p ‚Äì %b %-d, %Y") %></span>
    </div>
    <div class="ai-intro">
      I can answer questions about any Jump meeting. What do you want to know?
    </div>
  </div>

  <!-- Messages Container -->
  <div class="messages-container" id="messages">
    <% @messages.each do |message| %>
      <div class="message message-<%= message.role %>">
        <% if message.role == 'user' %>
          <div class="message-bubble user-bubble">
            <div class="message-content">
              <%= simple_format(message.content) %>
            </div>
            <div class="message-avatars">
              <div class="avatar">üë§</div>
            </div>
          </div>
        <% else %>
          <div class="message-bubble assistant-bubble">
            <div class="message-content">
              <%= simple_format(message.content) %>
            </div>
          </div>
        <% end %>
      </div>
    <% end %>
    
    <!-- Loading indicator -->
    <div class="message message-assistant" id="loading-message" style="display: none;">
      <div class="message-bubble assistant-bubble loading-bubble">
        <div class="message-content">
          <!-- Typing indicator -->
          <div class="typing-indicator" id="typing-indicator">
            <div class="typing-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
            <div class="typing-text" id="loading-text">AI is thinking...</div>
          </div>
          
          <!-- Tool usage indicator -->
          <div class="tool-indicator" id="tool-indicator" style="display: none;">
            <div class="tool-icon">üîß</div>
            <div class="tool-text" id="tool-text">Using tools to help you...</div>
          </div>
          
          <!-- Progress indicator -->
          <div class="progress-indicator" id="progress-indicator" style="display: none;">
            <div class="progress-bar">
              <div class="progress-fill"></div>
            </div>
            <div class="progress-text" id="progress-text">Processing your request...</div>
          </div>
          
          <!-- Status messages -->
          <div class="status-message" id="status-message" style="display: none;">
            <div class="status-icon" id="status-icon">‚è≥</div>
            <div class="status-text" id="status-text">Preparing response...</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Input Section -->
  <div class="chat-input-section">
    <div class="input-container">
      <%= form_with model: @message, url: messages_path, method: :post, local: true, id: "message-form" do |form| %>
        <div class="input-group">
          <%= form.text_area :content, 
              placeholder: "Ask anything about your meetings...", 
              class: "message-input",
              id: "message-input",
              rows: 1 %>
          <div class="input-actions">
            <button type="button" class="action-btn" title="Add attachment">+</button>
            <div class="context-selector">
              <button type="button" class="context-btn">All meetings ‚ñº</button>
            </div>
            <button type="button" class="action-btn" title="AI Assistant">ü§ñ</button>
            <button type="button" class="action-btn" title="Email">üìß</button>
            <button type="submit" class="action-btn send-btn" title="Send message">üé§</button>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>



<script>
  // Auto-scroll to bottom of messages
  function scrollToBottom() {
    const messagesContainer = document.getElementById('messages');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // Also scroll the entire page to ensure the loading message is visible
    setTimeout(() => {
      const loadingMessage = document.getElementById('loading-message');
      if (loadingMessage && loadingMessage.style.display !== 'none') {
        loadingMessage.scrollIntoView({ behavior: 'smooth', block: 'end' });
      }
    }, 100);
  }

  // Auto-resize textarea
  function autoResizeTextarea() {
    const textarea = document.getElementById('message-input');
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
  }

  // Play notification sound
  function playNotificationSound() {
    try {
      const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');
      audio.volume = 0.3;
      audio.play();
    } catch (e) {
      // Ignore audio errors
    }
  }

  // Trigger haptic feedback on mobile
  function triggerHapticFeedback() {
    if ('vibrate' in navigator) {
      navigator.vibrate(50);
    }
  }

  // Tab switching
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
    });
  });



  // Scroll on page load
  document.addEventListener('DOMContentLoaded', function() {
    scrollToBottom();
    
    // Auto-resize textarea on input
    const textarea = document.getElementById('message-input');
    textarea.addEventListener('input', autoResizeTextarea);
    
    // Handle Enter key - prevent default and trigger our custom submit
    textarea.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        e.stopPropagation();
        
        // Trigger our custom form submission
        const form = document.getElementById('message-form');
        const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
        form.dispatchEvent(submitEvent);
      }
    });
  });

  // Handle form submission with proper loading states
  document.getElementById('message-form').addEventListener('submit', function(e) {
    e.preventDefault(); // Prevent default form submission
    
    const input = document.getElementById('message-input');
    const loadingMessage = document.getElementById('loading-message');
    
    if (input.value.trim() === '') {
      return;
    }
    
    // Show loading state immediately
    input.readOnly = true;
    loadingMessage.style.display = 'block';
    scrollToBottom();
    
    // Play notification sound and haptic feedback
    playNotificationSound();
    triggerHapticFeedback();
    
    // Show typing indicator first
    showTypingIndicator();
    
    // Determine what type of request this is
    const userMessage = input.value.toLowerCase();
    
    // After 2 seconds, show appropriate indicator
    setTimeout(() => {
      if (userMessage.includes('schedule') || userMessage.includes('appointment') || userMessage.includes('meeting')) {
        showToolIndicator('Scheduling your meeting...');
      } else if (userMessage.includes('email') || userMessage.includes('send')) {
        showToolIndicator('Sending your email...');
      } else if (userMessage.includes('search') || userMessage.includes('find') || userMessage.includes('who')) {
        showToolIndicator('Searching through your data...');
      } else if (userMessage.includes('task') || userMessage.includes('todo')) {
        showToolIndicator('Creating your task...');
      } else {
        showStatusMessage('Generating response...', 'üí≠');
      }
    }, 2000);
    
    // Submit via AJAX
    const formData = new FormData(document.getElementById('message-form'));
    
    fetch('/messages', {
      method: 'POST',
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.json())
    .then(data => {
      // Hide loading message
      loadingMessage.style.display = 'none';
      
      // Reset input
      input.readOnly = false;
      input.value = '';
      input.style.height = 'auto';
      
      if (data.success) {
        // Reload the page to show new messages
        window.location.reload();
      } else {
        alert('Error: ' + (data.errors || ['Unknown error']).join(', '));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      loadingMessage.style.display = 'none';
      input.readOnly = false;
      alert('An error occurred. Please try again.');
    });
  });

  // Loading indicator functions
  function showTypingIndicator() {
    hideAllIndicators();
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
      typingIndicator.style.display = 'flex';
    }
  }

  function showToolIndicator(message) {
    hideAllIndicators();
    const toolIndicator = document.getElementById('tool-indicator');
    document.getElementById('tool-text').textContent = message;
    toolIndicator.style.display = 'flex';
  }

  function showProgressIndicator(message) {
    hideAllIndicators();
    const progressIndicator = document.getElementById('progress-indicator');
    document.getElementById('progress-text').textContent = message;
    progressIndicator.style.display = 'block';
  }

  function showStatusMessage(message, icon) {
    hideAllIndicators();
    const statusMessage = document.getElementById('status-message');
    document.getElementById('status-icon').textContent = icon;
    document.getElementById('status-text').textContent = message;
    statusMessage.style.display = 'flex';
  }

  function hideAllIndicators() {
    document.getElementById('typing-indicator').style.display = 'none';
    document.getElementById('tool-indicator').style.display = 'none';
    document.getElementById('progress-indicator').style.display = 'none';
    document.getElementById('status-message').style.display = 'none';
  }





</script> 